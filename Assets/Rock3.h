// "Rock3.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Rock3.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Rock3_version_
const char Rock3_version[4] = { '0','1','9','d' };
#define _Rock3_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Rock3_vertexcount_
const unsigned Rock3_vertexcount = 76;
#define _Rock3_vertexcount_
#endif
#ifndef _Rock3_indexcount_
const unsigned Rock3_indexcount = 84;
#define _Rock3_indexcount_
#endif
#ifndef _Rock3_materialcount_
const unsigned Rock3_materialcount = 1; // can be used for batched draws
#define _Rock3_materialcount_
#endif
#ifndef _Rock3_meshcount_
const unsigned Rock3_meshcount = 1;
#define _Rock3_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Rock3_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Rock3_vertices[76] =
{
	{	{ -0.133551f, 0.195373f, -0.261151f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.646800f, 0.702300f, -0.297400f }	},
	{	{ -0.368754f, -0.007506f, -0.225594f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.646800f, 0.702300f, -0.297400f }	},
	{	{ -0.483340f, -0.008736f, 0.017666f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.646800f, 0.702300f, -0.297400f }	},
	{	{ -0.144681f, 0.287039f, -0.017421f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.646800f, 0.702300f, -0.297400f }	},
	{	{ 0.245481f, 0.257993f, -0.323641f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.949000f, -0.108400f, -0.296100f }	},
	{	{ 0.320674f, -0.015972f, 0.017629f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.949000f, -0.108400f, -0.296100f }	},
	{	{ 0.194023f, -0.025684f, -0.384742f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.949000f, -0.108400f, -0.296100f }	},
	{	{ -0.038782f, -0.024836f, -0.552464f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.510700f, 0.168700f, -0.843000f }	},
	{	{ 0.108096f, 0.218570f, -0.387914f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.510700f, 0.168700f, -0.843000f }	},
	{	{ 0.245481f, 0.257993f, -0.323641f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.510700f, 0.168700f, -0.843000f }	},
	{	{ 0.194023f, -0.025684f, -0.384742f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.510700f, 0.168700f, -0.843000f }	},
	{	{ 0.194023f, -0.025684f, -0.384742f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.011300f, -0.999700f, 0.023100f }	},
	{	{ -0.156653f, -0.012425f, 0.017647f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.011300f, -0.999700f, 0.023100f }	},
	{	{ -0.483340f, -0.008736f, 0.017666f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.011300f, -0.999700f, 0.023100f }	},
	{	{ 0.194023f, -0.025684f, -0.384742f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.007400f, -0.999600f, 0.026500f }	},
	{	{ 0.320674f, -0.015972f, 0.017629f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.007400f, -0.999600f, 0.026500f }	},
	{	{ -0.156653f, -0.012425f, 0.017647f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.007400f, -0.999600f, 0.026500f }	},
	{	{ 0.245481f, 0.257993f, -0.323641f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.982500f, 0.044000f, -0.181200f }	},
	{	{ 0.346593f, 0.278844f, 0.229685f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.982500f, 0.044000f, -0.181200f }	},
	{	{ 0.320674f, -0.015972f, 0.017629f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.982500f, 0.044000f, -0.181200f }	},
	{	{ -0.144681f, 0.287039f, -0.017421f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.117000f, 0.963600f, -0.240400f }	},
	{	{ 0.062184f, 0.389908f, 0.294261f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.117000f, 0.963600f, -0.240400f }	},
	{	{ 0.245481f, 0.257993f, -0.323641f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.117000f, 0.963600f, -0.240400f }	},
	{	{ -0.483340f, -0.008736f, 0.017666f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.537100f, 0.538000f, -0.649700f }	},
	{	{ -0.216553f, 0.330193f, 0.077736f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.537100f, 0.538000f, -0.649700f }	},
	{	{ -0.144681f, 0.287039f, -0.017421f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.537100f, 0.538000f, -0.649700f }	},
	{	{ -0.156653f, -0.012425f, 0.017647f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.011300f, -0.999900f, 0.004700f }	},
	{	{ -0.391027f, -0.008531f, 0.282848f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.011300f, -0.999900f, 0.004700f }	},
	{	{ -0.483340f, -0.008736f, 0.017666f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.011300f, -0.999900f, 0.004700f }	},
	{	{ 0.320674f, -0.015972f, 0.017629f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.007400f, -1.000000f, 0.005700f }	},
	{	{ 0.226291f, -0.013766f, 0.282822f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.007400f, -1.000000f, 0.005700f }	},
	{	{ -0.156653f, -0.012425f, 0.017647f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.007400f, -1.000000f, 0.005700f }	},
	{	{ 0.245481f, 0.257993f, -0.323641f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.342700f, 0.934400f, -0.097800f }	},
	{	{ 0.062184f, 0.389908f, 0.294261f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.342700f, 0.934400f, -0.097800f }	},
	{	{ 0.346593f, 0.278844f, 0.229685f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.342700f, 0.934400f, -0.097800f }	},
	{	{ -0.144681f, 0.287039f, -0.017421f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.080900f, 0.929300f, -0.360400f }	},
	{	{ -0.216553f, 0.330193f, 0.077736f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.080900f, 0.929300f, -0.360400f }	},
	{	{ 0.062184f, 0.389908f, 0.294261f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.080900f, 0.929300f, -0.360400f }	},
	{	{ -0.483340f, -0.008736f, 0.017666f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.779200f, 0.565300f, 0.270800f }	},
	{	{ -0.391027f, -0.008531f, 0.282848f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.779200f, 0.565300f, 0.270800f }	},
	{	{ -0.216553f, 0.330193f, 0.077736f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.779200f, 0.565300f, 0.270800f }	},
	{	{ -0.156653f, -0.012425f, 0.017647f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.008500f, -0.999900f, 0.007200f }	},
	{	{ 0.226291f, -0.013766f, 0.282822f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.008500f, -0.999900f, 0.007200f }	},
	{	{ -0.391027f, -0.008531f, 0.282848f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.008500f, -0.999900f, 0.007200f }	},
	{	{ 0.320674f, -0.015972f, 0.017629f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.895000f, -0.309600f, 0.321100f }	},
	{	{ 0.346593f, 0.278844f, 0.229685f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.895000f, -0.309600f, 0.321100f }	},
	{	{ 0.226291f, -0.013766f, 0.282822f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.895000f, -0.309600f, 0.321100f }	},
	{	{ 0.062184f, 0.389908f, 0.294261f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.348700f, 0.400300f, 0.847400f }	},
	{	{ -0.018121f, -0.004172f, 0.513454f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.348700f, 0.400300f, 0.847400f }	},
	{	{ 0.346593f, 0.278844f, 0.229685f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.348700f, 0.400300f, 0.847400f }	},
	{	{ -0.216553f, 0.330193f, 0.077736f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.600300f, 0.478700f, 0.640700f }	},
	{	{ -0.018121f, -0.004172f, 0.513454f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.600300f, 0.478700f, 0.640700f }	},
	{	{ 0.062184f, 0.389908f, 0.294261f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.600300f, 0.478700f, 0.640700f }	},
	{	{ -0.391027f, -0.008531f, 0.282848f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.418600f, 0.618400f, 0.665100f }	},
	{	{ -0.018121f, -0.004172f, 0.513454f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.418600f, 0.618400f, 0.665100f }	},
	{	{ -0.216553f, 0.330193f, 0.077736f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.418600f, 0.618400f, 0.665100f }	},
	{	{ 0.226291f, -0.013766f, 0.282822f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.008500f, -0.999400f, 0.032600f }	},
	{	{ -0.018121f, -0.004172f, 0.513454f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.008500f, -0.999400f, 0.032600f }	},
	{	{ -0.391027f, -0.008531f, 0.282848f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.008500f, -0.999400f, 0.032600f }	},
	{	{ 0.346593f, 0.278844f, 0.229685f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.675800f, -0.146700f, 0.722300f }	},
	{	{ -0.018121f, -0.004172f, 0.513454f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.675800f, -0.146700f, 0.722300f }	},
	{	{ 0.226291f, -0.013766f, 0.282822f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.675800f, -0.146700f, 0.722300f }	},
	{	{ -0.038782f, -0.024836f, -0.552464f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.395600f, 0.666100f, -0.632200f }	},
	{	{ -0.133551f, 0.195373f, -0.261151f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.395600f, 0.666100f, -0.632200f }	},
	{	{ 0.108096f, 0.218570f, -0.387914f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.395600f, 0.666100f, -0.632200f }	},
	{	{ -0.038782f, -0.024836f, -0.552464f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.570400f, 0.555200f, -0.605300f }	},
	{	{ -0.368754f, -0.007506f, -0.225594f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.570400f, 0.555200f, -0.605300f }	},
	{	{ -0.133551f, 0.195373f, -0.261151f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.570400f, 0.555200f, -0.605300f }	},
	{	{ 0.108096f, 0.218570f, -0.387914f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.204600f, 0.928100f, -0.311100f }	},
	{	{ -0.133551f, 0.195373f, -0.261151f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.204600f, 0.928100f, -0.311100f }	},
	{	{ -0.144681f, 0.287039f, -0.017421f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.204600f, 0.928100f, -0.311100f }	},
	{	{ 0.245481f, 0.257993f, -0.323641f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.204600f, 0.928100f, -0.311100f }	},
	{	{ -0.368754f, -0.007506f, -0.225594f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.031200f, -0.999500f, 0.003900f }	},
	{	{ -0.038782f, -0.024836f, -0.552464f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.031200f, -0.999500f, 0.003900f }	},
	{	{ 0.194023f, -0.025684f, -0.384742f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.031200f, -0.999500f, 0.003900f }	},
	{	{ -0.483340f, -0.008736f, 0.017666f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.031200f, -0.999500f, 0.003900f }	},
};
#define _Rock3_vertices_
#endif
#ifndef _Rock3_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Rock3_indices[84] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 8, 9,
	 10, 7, 9,
	 11, 12, 13,
	 14, 15, 16,
	 17, 18, 19,
	 20, 21, 22,
	 23, 24, 25,
	 26, 27, 28,
	 29, 30, 31,
	 32, 33, 34,
	 35, 36, 37,
	 38, 39, 40,
	 41, 42, 43,
	 44, 45, 46,
	 47, 48, 49,
	 50, 51, 52,
	 53, 54, 55,
	 56, 57, 58,
	 59, 60, 61,
	 62, 63, 64,
	 65, 66, 67,
	 68, 69, 70,
	 71, 68, 70,
	 72, 73, 74,
	 75, 72, 74,
};
#define _Rock3_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Rock3_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Rock3_materials[1] =
{
	{
		{{ 0.287072f, 0.287072f, 0.287072f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Rock.002",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Rock3_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Rock3_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Rock3_batches[1][2] =
{
	{ 84, 0 },
};
#define _Rock3_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Rock3_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Rock3_meshes[1] =
{
	{
		"default",
		84,
		0,
		0,
	},
};
#define _Rock3_meshes_
#endif
